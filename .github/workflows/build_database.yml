name: Build Fungal RefSeq Database

on:
  workflow_dispatch:
    inputs:
      refseq_version:
        description: 'Enter the RefSeq version (e.g., v230, v231)'
        required: true

jobs:
  # --------------------------------------------------------------------------
  # JOB 1: Get the list of all fungal genomes from NCBI
  # --------------------------------------------------------------------------
  list_genomes:
    runs-on: ubuntu-latest
    outputs:
      genome_count: ${{ steps.check_size.outputs.count }}
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      - name: Download NCBI Datasets Tool
        run: |
          wget -q https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets
          chmod +x datasets

      - name: Get Fungal Genome List
        run: |
          export PATH=$(pwd):$PATH
          ./datasets summary genome taxon 4751 --reference --as-json-lines | \
          jq -r '[.accession, .organism.organism_name] | @tsv' > ids.tsv

      - name: Check list size
        id: check_size
        run: |
          count=$(wc -l < ids.tsv)
          echo "Found ${count} fungal genomes."
          echo "count=${count}" >> $GITHUB_OUTPUT

      - name: Split id list for parallel jobs
        run: |
          # We'll split into 10 chunks for the matrix
          split -n l/10 ids.tsv -d --additional-suffix=.tsv x

      - name: Upload list chunks for next job
        uses: actions/upload-artifact@v4
        with:
          name: genome-chunks
          path: x*.tsv
          overwrite: true

  # --------------------------------------------------------------------------
  # JOB 2: Create sketches for each chunk in parallel (Definitive Version)
  # --------------------------------------------------------------------------
  create_sketches:
    needs: list_genomes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This creates a 10-job parallel matrix, for chunks 0 through 9
        chunk: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
      - name: Download Tools
        run: |
          wget -q https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets
          chmod +x datasets
          wget -q https://github.com/marbl/Mash/releases/download/v2.3/mash-Linux64-v2.3.tar
          tar -xvf mash-Linux64-v2.3.tar && mv mash-Linux64-v2.3/mash .

      - name: Download genome chunk artifact
        uses: actions/download-artifact@v4
        with:
          name: genome-chunks

      - name: Download, Sketch, and Paste (Chunk ${{ matrix.chunk }})
        run: |
          set -euo pipefail
          export PATH=$(pwd):$PATH
          INPUT_FILE=$(printf "x%02d.tsv" ${{ matrix.chunk }})
          OUTPUT_SKETCH="chunk_${{ matrix.chunk }}.msh"
          LOG="chunk_${{ matrix.chunk }}.log"
          touch "$LOG"
          echo "Processing ${INPUT_FILE} one genome at a time..." | tee -a "$LOG"
          processed=0
          while IFS=$'\t' read -r accession organism_name; do
            [ -z "$accession" ] && continue
            echo "--- Downloading $accession ---" | tee -a "$LOG"
            success=false
            for i in 1 2 3; do
              if ./datasets download genome accession "$accession" --no-progressbar --filename "genome.zip"; then
                success=true
                break
              fi
              echo "Download attempt $i failed. Retrying in 15s..." | tee -a "$LOG"
              sleep 15
            done
            if ! $success; then
              echo "ERROR: Failed to download $accession after 3 attempts. Skipping." | tee -a "$LOG"
              continue
            fi
            unzip -q -o genome.zip -d genome_data
            fasta_file=$(find genome_data/ncbi_dataset/data -name "*.fna")
            if [ -z "$fasta_file" ] || [ ! -f "$fasta_file" ]; then
              echo "ERROR: Could not find .fna file for $accession. Skipping." | tee -a "$LOG"
              rm -rf genome_data genome.zip
              continue
            fi
            if ! ./mash sketch -k 21 -s 1000 -p 8 -o single.msh "$fasta_file" >>"$LOG" 2>&1; then
              echo "ERROR: mash sketch failed for $accession. Skipping." | tee -a "$LOG"
              rm -rf genome_data genome.zip single.msh
              continue
            fi
            if [ ! -f "$OUTPUT_SKETCH" ]; then
              mv single.msh "$OUTPUT_SKETCH"
            else
              if ! ./mash paste -l "$OUTPUT_SKETCH" "$OUTPUT_SKETCH" single.msh > combined.msh 2>>"$LOG"; then
                echo "ERROR: mash paste failed. Skipping $accession." | tee -a "$LOG"
                rm -rf genome_data genome.zip single.msh combined.msh
                continue
              fi
              mv combined.msh "$OUTPUT_SKETCH"
              rm single.msh
            fi
            processed=$((processed+1))
            rm -rf genome_data genome.zip
          done < "$INPUT_FILE"
          echo "Processed $processed genomes." | tee -a "$LOG"
          if [ ! -f "$OUTPUT_SKETCH" ] || [ ! -s "$OUTPUT_SKETCH" ]; then
            echo "No sketch built for chunk ${{ matrix.chunk }}. Exiting with error." | tee -a "$LOG"
            exit 1
          fi

      - name: Upload partial sketch artifact
        uses: actions/upload-artifact@v4
        with:
          name: partial-sketch-${{ matrix.chunk }}
          path: chunk_${{ matrix.chunk }}.msh
          overwrite: true

      - name: Upload chunk log (always)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chunk-log-${{ matrix.chunk }}
          path: chunk_${{ matrix.chunk }}.log

  # --------------------------------------------------------------------------
  # JOB 3: Combine all partial sketches into the final database
  # --------------------------------------------------------------------------
  combine_sketches:
    needs: create_sketches
    runs-on: ubuntu-latest
    env:
      REFSEQ_VERSION: ${{ github.event.inputs.refseq_version }}
    steps:

      - name: Download Mash
        run: |
          wget -q https://github.com/marbl/Mash/releases/download/v2.3/mash-Linux64-v2.3.tar
          tar -xvf mash-Linux64-v2.3.tar && mv mash-Linux64-v2.3/mash .

      - name: Download all partial sketch artifacts
        uses: actions/download-artifact@v4
        with:
          name: partial-sketch-*
          path: partial_sketches/

      - name: Download all chunk logs
        uses: actions/download-artifact@v4
        with:
          name: chunk-log-*
          path: chunk_logs/

      - name: Combine all sketches
        run: |
          export PATH=$(pwd):$PATH
          echo "Pasting all partial sketches..."
          mash paste Fungi_RefSeq_${REFSEQ_VERSION}.msh $(find partial_sketches -name "*.msh")

      - name: Compress final sketch
        run: gzip Fungi_RefSeq_${REFSEQ_VERSION}.msh

      - name: Create Release and Upload Final Sketch
        uses: softprops/action-gh-release@v2
        with:
          name: Fungal RefSeq Database ${{ env.REFSEQ_VERSION }}
          tag_name: v1.0.0
          files: Fungi_RefSeq_${{ env.REFSEQ_VERSION }}.msh.gz
