name: Build Fungal RefSeq Database

on:
  workflow_dispatch:
    inputs:
      refseq_version:
        description: 'Enter the RefSeq version to use as a tag (e.g., v231)'
        required: true

jobs:
  # --------------------------------------------------------------------------
  # JOB 1: Get the list of all fungal genomes from NCBI
  # --------------------------------------------------------------------------
  list_genomes:
    runs-on: ubuntu-latest
    outputs:
      genome_count: ${{ steps.check_size.outputs.count }}
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      - name: Download NCBI Datasets Tool
        run: |
          wget -q https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets
          chmod +x datasets

      - name: Get Fungal Genome List
        run: |
          export PATH=$(pwd):$PATH
          ./datasets summary genome taxon 4751 --reference --as-json-lines | \
          jq -r '[.accession, .organism.organism_name] | @tsv' > ids.tsv

      - name: Check list size
        id: check_size
        run: |
          count=$(wc -l < ids.tsv)
          echo "Found ${count} fungal genomes."
          echo "count=${count}" >> $GITHUB_OUTPUT

      - name: Split id list for parallel jobs
        run: |
          split -n l/10 ids.tsv -d --additional-suffix=.tsv x

      - name: Upload list chunks for next job
        uses: actions/upload-artifact@v4
        with:
          name: genome-chunks
          path: x*.tsv
          overwrite: true

  # --------------------------------------------------------------------------
  # JOB 2: Create sketches (Final Polite Version)
  # --------------------------------------------------------------------------
  create_sketches:
    needs: list_genomes
    runs-on: ubuntu-latest
    timeout-minutes: 720 # 12 hours
    strategy:
      fail-fast: false
      matrix:
        chunk: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
      - name: Download Tools
        run: |
          wget -q https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets
          chmod +x datasets
          wget -q https://github.com/marbl/Mash/releases/download/v2.3/mash-Linux64-v2.3.tar
          tar -xvf mash-Linux64-v2.3.tar && mv mash-Linux64-v2.3/mash .

      - name: Download genome chunk artifact
        uses: actions/download-artifact@v4
        with:
          name: genome-chunks
      
      - name: Download, Unzip, and Sketch Genomes (Chunk ${{ matrix.chunk }})
        run: |
          export PATH=$(pwd):$PATH
          INPUT_FILE=$(printf "x%02d.tsv" ${{ matrix.chunk }})
          OUTPUT_SKETCH="chunk_${{ matrix.chunk }}.msh"

          echo "Processing ${INPUT_FILE} one genome at a time..."
          
          mkdir -p genomes_zip
          
          # === MODIFIED DOWNLOAD LOOP ===
          # We will now loop and download one by one, with a short sleep.
          # This is slower but much "nicer" to the NCBI servers and avoids timeouts.
          while IFS=$'\t' read -r accession organism_name; do
            if [ -z "$accession" ]; then continue; fi
            echo "--- Downloading $accession ---"
            
            # Use a retry loop for robustness
            success=false
            for i in 1 2 3; do
              if ./datasets download genome accession "$accession" --no-progressbar --filename "genomes_zip/${accession}.zip"; then
                success=true
                break
              fi
              echo "Download attempt $i failed. Waiting 10s to retry..."
              sleep 10
            done

            if ! $success; then
              echo "ERROR: Failed to download $accession after 3 attempts. Skipping."
            fi
            # Be polite and wait a moment before the next download.
            sleep 1
          done < "$INPUT_FILE"
          
          # The rest of the script proceeds as before
          echo "Unzipping all downloaded genomes..."
          mkdir -p genomes_fna
          for zipfile in genomes_zip/*.zip; do
            unzip -q -o "$zipfile" -d "unzipped_tmp"
            find unzipped_tmp/ncbi_dataset/data -name "*.fna" -exec mv {} genomes_fna/ \;
            rm -rf unzipped_tmp
          done
          
          echo "Sketching all genomes for this chunk..."
          ./mash sketch -k 21 -s 1000 -p 8 -o "$OUTPUT_SKETCH" genomes_fna/*.fna

      - name: Upload partial sketch artifact
        uses: actions/upload-artifact@v4
        with:
          name: partial-sketch-${{ matrix.chunk }}
          path: ${{ env.OUTPUT_SKETCH }}
          overwrite: true

  # --------------------------------------------------------------------------
  # JOB 3: Combine all partial sketches into the final database
  # --------------------------------------------------------------------------
  combine_sketches:
    if: success() || failure()
    needs: create_sketches
    runs-on: ubuntu-latest
    steps:
      - name: Download Mash
        run: |
          wget -q https://github.com/marbl/Mash/releases/download/v2.3/mash-Linux64-v2.3.tar
          tar -xvf mash-Linux64-v2.3.tar && mv mash-Linux64-v2.3/mash .
      
      - name: Download all successful sketch artifacts
        uses: actions/download-artifact@v4
        with:
          name: partial-sketch-*
          path: partial_sketches/
      
      - name: Combine all sketches
        run: |
          export PATH=$(pwd):$PATH
          FINAL_SKETCH_NAME="Fungi_RefSeq_${{ github.event.inputs.refseq_version }}.msh"
          echo "Pasting all partial sketches into ${FINAL_SKETCH_NAME}..."
          if [ -z "$(ls -A partial_sketches)" ]; then
            echo "No sketches were downloaded. Cannot create final database."
            exit 1
          fi
          ./mash paste "$FINAL_SKETCH_NAME" $(find partial_sketches -name "*.msh")

      - name: Compress final sketch
        run: |
          FINAL_SKETCH_NAME="Fungi_RefSeq_${{ github.event.inputs.refseq_version }}.msh"
          gzip "$FINAL_SKETCH_NAME"

      - name: Create Release and Upload Final Sketch
        uses: softprops/action-gh-release@v2
        with:
          name: Fungal RefSeq Database ${{ github.event.inputs.refseq_version }}
          tag_name: ${{ github.event.inputs.refseq_version }}
          files: Fungi_RefSeq_${{ github.event.inputs.refseq_version }}.msh.gz
