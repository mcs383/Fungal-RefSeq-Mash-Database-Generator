name: Build Fungal RefSeq Database

on:
  workflow_dispatch:

run-name: Build Fungal RefSeq Mash Database

jobs:
  # --------------------------------------------------------------------------
  # JOB 1: Get the list of all fungal genomes from NCBI
  # --------------------------------------------------------------------------
  list_genomes:
    runs-on: ubuntu-latest
    outputs:
      genome_count: ${{ steps.check_size.outputs.count }}
    steps:
      - name: Check Out Repository
        uses: actions/checkout@master

      - name: Download NCBI Datasets Tool
        run: |
          wget -q https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets
          chmod +x datasets

      - name: Get Fungal Genome List
        run: |
          export PATH=$(pwd):$PATH
          datasets summary genome taxon 4751 --reference --as-json-lines | \
          jq -r '[.accession, .organism.organism_name] | @tsv' > ids.tsv

      - name: Check list size
        id: check_size
        run: |
          count=$(wc -l < ids.tsv)
          echo "Found ${count} fungal genomes."
          echo "count=${count}" >> $GITHUB_OUTPUT

      - name: Split id list for parallel jobs
        run: |
          # We'll split into 10 chunks for the matrix
          split -n l/10 ids.tsv -d --additional-suffix=.tsv x
      
      - name: Upload list chunks for next job
        uses: actions/upload-artifact@v4
        with:
          name: genome-chunks
          path: x*.tsv
          overwrite: true

  # --------------------------------------------------------------------------
  # JOB 2: Create sketches for each chunk in parallel (Disk-Efficient Version)
  # --------------------------------------------------------------------------
  create_sketches:
    needs: list_genomes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This creates a 10-job parallel matrix, for chunks 0 through 9
        chunk: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
      - name: Download Tools
        run: |
          wget -q https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets
          chmod +x datasets
          wget -q https://github.com/marbl/Mash/releases/download/v2.3/mash-Linux64-v2.3.tar
          tar -xvf mash-Linux64-v2.3.tar && mv mash-Linux64-v2.3/mash .

      - name: Download genome chunk artifact
        uses: actions/download-artifact@v4
        with:
          name: genome-chunks
      
      - name: Download, Sketch, and Paste (Chunk ${{ matrix.chunk }})
        run: |
          export PATH=$(pwd):$PATH
          INPUT_FILE=$(printf "x%02d.tsv" ${{ matrix.chunk }})
          OUTPUT_SKETCH="chunk_${{ matrix.chunk }}.msh"

          echo "Processing ${INPUT_FILE} one genome at a time..."
          
          # This robust loop processes one genome at a time to conserve disk space
          while IFS=$'\t' read -r accession organism_name; do
            if [ -z "$accession" ]; then continue; fi

            echo "--- Downloading $accession ---"
            
            # Retry loop for downloading
            success=false
            for i in 1 2 3; do
              if datasets download genome accession "$accession" --no-progressbar --filename "genome.zip"; then
                success=true
                break
              fi
              echo "Download attempt $i failed. Waiting 15s to retry..."
              sleep 15
            done

            if ! $success; then
              echo "ERROR: Failed to download $accession after 3 attempts. Skipping."
              continue
            fi

            # Unzip and find the fasta file
            unzip -q -o genome.zip -d genome_data
            fasta_file=$(find genome_data/ncbi_dataset/data -name "*.fna")

            if [ -z "$fasta_file" ] || [ ! -f "$fasta_file" ]; then
                echo "ERROR: Could not find .fna file for $accession. Skipping."
                rm -rf genome_data genome.zip
                continue
            fi
            
            # Sketch the single genome and paste it into the growing combined sketch
            if [ ! -f "$OUTPUT_SKETCH" ]; then
              echo "Creating initial sketch for this chunk..."
              mash sketch -k 21 -s 1000 -p 8 -o "$OUTPUT_SKETCH" "$fasta_file"
            else
              echo "Pasting new sketch into chunk..."
              mash sketch -k 21 -s 1000 -p 8 -o single.msh "$fasta_file"
              mash paste -l "$OUTPUT_SKETCH" single.msh > combined.msh
              mv combined.msh "$OUTPUT_SKETCH"
            fi
            
            # CRITICAL STEP: Clean up this genome's files before starting the next loop
            echo "Cleaning up files for $accession..."
            rm -rf genome_data genome.zip single.msh
            
          done < "$INPUT_FILE"

      - name: Upload partial sketch artifact
        uses: actions/upload-artifact@v4
        with:
          name: partial-sketch-${{ matrix.chunk }}
          path: ${{ env.OUTPUT_SKETCH }}
          overwrite: true

  # --------------------------------------------------------------------------
  # JOB 3: Combine all partial sketches into the final database
  # --------------------------------------------------------------------------
  combine_sketches:
    needs: create_sketches
    runs-on: ubuntu-latest
    steps:
      - name: Download Mash
        run: |
          wget -q https://github.com/marbl/Mash/releases/download/v2.3/mash-Linux64-v2.3.tar
          tar -xvf mash-Linux64-v2.3.tar && mv mash-Linux64-v2.3/mash .
      
      - name: Download all partial sketch artifacts
        uses: actions/download-artifact@v4
        with:
          name: partial-sketch-* # This wildcard downloads all artifacts starting with 'partial-sketch-'
          path: partial_sketches/

      - name: Combine all sketches
        run: |
          export PATH=$(pwd):$PATH
          echo "Pasting all partial sketches..."
          # The find command below is robust and handles the directory structure
          mash paste Fungi_RefSeq_v230.msh $(find partial_sketches -name "*.msh")
      
      - name: Compress final sketch
        run: gzip Fungi_RefSeq_v230.msh

      - name: Create Release and Upload Final Sketch
        uses: softprops/action-gh-release@v2
        with:
          name: Fungal RefSeq Database v230
          tag_name: v1.0.0
          files: Fungi_RefSeq_v230.msh.gz
